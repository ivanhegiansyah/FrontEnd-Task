{"ast":null,"code":"import { v4 as uuidv4 } from \"uuid\";\nimport { createSlice } from \"@reduxjs/toolkit\";\nconst initialValue = [{\n  id: 1,\n  title: \"Mengerjakan Exercise\",\n  completed: true,\n  editing: true\n}, {\n  id: 2,\n  title: \"Mengerjakan Assignment\",\n  completed: false,\n  editing: true\n}];\nexport const todoSlice = createSlice({\n  name: \"todo\",\n  initialState: {\n    todos: initialValue\n  },\n  reducers: {\n    deleteContent: (state, action) => {\n      state.todos = state.todos.filter(item => item.id !== action.payload);\n    },\n    addContent: (state, action) => {\n      console.log(action.payload.title);\n      const newData = {\n        id: uuidv4(),\n        ...action.payload\n      };\n      state.todos = [...state.todos, newData];\n    },\n    editContent: (state, action) => {\n      //   const newData = state.todos.map((content) => {\n      //     if (content.id === action.payload) {\n      //       content.title = action.payload;\n      //     }\n      //     return content;\n      //   });\n      //   state.todos = [...state.todos, newData];\n      state.todos = state.todos.map(content => {\n        if (content.id === action.payload.id) {\n          content.title = action.payload.title;\n          return { ...content\n          };\n        } else {\n          return content;\n        }\n      });\n      console.log(action.payload.id); //   const newData = { ...action.payload };\n      //   state.todos = [...state.todos, newData];\n    },\n    checkContent: (state, action) => {\n      state.todos = state.todos.map(content => {\n        if (content.id === action.payload) {\n          return { ...content,\n            completed: !content.completed\n          };\n        } else {\n          return content;\n        }\n      });\n    }\n  }\n});\nexport const {\n  deleteContent,\n  addContent,\n  editContent,\n  checkContent\n} = todoSlice.actions;\nexport default todoSlice.reducer;","map":{"version":3,"sources":["D:/Kuliah/Altera-Academy/Task/Frontend/src/store/todoSlice.js"],"names":["v4","uuidv4","createSlice","initialValue","id","title","completed","editing","todoSlice","name","initialState","todos","reducers","deleteContent","state","action","filter","item","payload","addContent","console","log","newData","editContent","map","content","checkContent","actions","reducer"],"mappings":"AAAA,SAASA,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AACA,SAASC,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,YAAY,GAAG,CACnB;AACEC,EAAAA,EAAE,EAAE,CADN;AAEEC,EAAAA,KAAK,EAAE,sBAFT;AAGEC,EAAAA,SAAS,EAAE,IAHb;AAIEC,EAAAA,OAAO,EAAE;AAJX,CADmB,EAOnB;AACEH,EAAAA,EAAE,EAAE,CADN;AAEEC,EAAAA,KAAK,EAAE,wBAFT;AAGEC,EAAAA,SAAS,EAAE,KAHb;AAIEC,EAAAA,OAAO,EAAE;AAJX,CAPmB,CAArB;AAeA,OAAO,MAAMC,SAAS,GAAGN,WAAW,CAAC;AACnCO,EAAAA,IAAI,EAAE,MAD6B;AAEnCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAER;AADK,GAFqB;AAMnCS,EAAAA,QAAQ,EAAE;AACRC,IAAAA,aAAa,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAChCD,MAAAA,KAAK,CAACH,KAAN,GAAcG,KAAK,CAACH,KAAN,CAAYK,MAAZ,CAAoBC,IAAD,IAAUA,IAAI,CAACb,EAAL,KAAYW,MAAM,CAACG,OAAhD,CAAd;AACD,KAHO;AAKRC,IAAAA,UAAU,EAAE,CAACL,KAAD,EAAQC,MAAR,KAAmB;AAC7BK,MAAAA,OAAO,CAACC,GAAR,CAAYN,MAAM,CAACG,OAAP,CAAeb,KAA3B;AACA,YAAMiB,OAAO,GAAG;AAAElB,QAAAA,EAAE,EAAEH,MAAM,EAAZ;AAAgB,WAAGc,MAAM,CAACG;AAA1B,OAAhB;AACAJ,MAAAA,KAAK,CAACH,KAAN,GAAc,CAAC,GAAGG,KAAK,CAACH,KAAV,EAAiBW,OAAjB,CAAd;AACD,KATO;AAWRC,IAAAA,WAAW,EAAE,CAACT,KAAD,EAAQC,MAAR,KAAmB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,MAAAA,KAAK,CAACH,KAAN,GAAcG,KAAK,CAACH,KAAN,CAAYa,GAAZ,CAAiBC,OAAD,IAAa;AACzC,YAAIA,OAAO,CAACrB,EAAR,KAAeW,MAAM,CAACG,OAAP,CAAed,EAAlC,EAAsC;AAClCqB,UAAAA,OAAO,CAACpB,KAAR,GAAgBU,MAAM,CAACG,OAAP,CAAeb,KAA/B;AACA,iBAAO,EAAC,GAAGoB;AAAJ,WAAP;AACH,SAHD,MAGO;AACL,iBAAOA,OAAP;AACD;AACF,OAPa,CAAd;AASFL,MAAAA,OAAO,CAACC,GAAR,CAAYN,MAAM,CAACG,OAAP,CAAed,EAA3B,EAjBgC,CAkBhC;AACA;AACC,KA/BO;AAiCRsB,IAAAA,YAAY,EAAE,CAACZ,KAAD,EAAQC,MAAR,KAAmB;AAC/BD,MAAAA,KAAK,CAACH,KAAN,GAAcG,KAAK,CAACH,KAAN,CAAYa,GAAZ,CAAiBC,OAAD,IAAa;AACzC,YAAIA,OAAO,CAACrB,EAAR,KAAeW,MAAM,CAACG,OAA1B,EAAmC;AACjC,iBAAO,EAAE,GAAGO,OAAL;AAAcnB,YAAAA,SAAS,EAAE,CAACmB,OAAO,CAACnB;AAAlC,WAAP;AACD,SAFD,MAEO;AACL,iBAAOmB,OAAP;AACD;AACF,OANa,CAAd;AAOD;AAzCO;AANyB,CAAD,CAA7B;AAmDP,OAAO,MAAM;AAAEZ,EAAAA,aAAF;AAAiBM,EAAAA,UAAjB;AAA6BI,EAAAA,WAA7B;AAA0CG,EAAAA;AAA1C,IACXlB,SAAS,CAACmB,OADL;AAEP,eAAenB,SAAS,CAACoB,OAAzB","sourcesContent":["import { v4 as uuidv4 } from \"uuid\";\r\nimport { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialValue = [\r\n  {\r\n    id: 1,\r\n    title: \"Mengerjakan Exercise\",\r\n    completed: true,\r\n    editing: true,\r\n  },\r\n  {\r\n    id: 2,\r\n    title: \"Mengerjakan Assignment\",\r\n    completed: false,\r\n    editing: true,\r\n  },\r\n];\r\n\r\nexport const todoSlice = createSlice({\r\n  name: \"todo\",\r\n  initialState: {\r\n    todos: initialValue,\r\n  },\r\n\r\n  reducers: {\r\n    deleteContent: (state, action) => {\r\n      state.todos = state.todos.filter((item) => item.id !== action.payload);\r\n    },\r\n\r\n    addContent: (state, action) => {\r\n      console.log(action.payload.title);\r\n      const newData = { id: uuidv4(), ...action.payload };\r\n      state.todos = [...state.todos, newData];\r\n    },\r\n\r\n    editContent: (state, action) => {\r\n      //   const newData = state.todos.map((content) => {\r\n      //     if (content.id === action.payload) {\r\n      //       content.title = action.payload;\r\n      //     }\r\n      //     return content;\r\n      //   });\r\n      //   state.todos = [...state.todos, newData];\r\n      state.todos = state.todos.map((content) => {\r\n        if (content.id === action.payload.id) {\r\n            content.title = action.payload.title;\r\n            return {...content}\r\n        } else {\r\n          return content;\r\n        }\r\n      });\r\n\r\n    console.log(action.payload.id);\r\n    //   const newData = { ...action.payload };\r\n    //   state.todos = [...state.todos, newData];\r\n    },\r\n\r\n    checkContent: (state, action) => {\r\n      state.todos = state.todos.map((content) => {\r\n        if (content.id === action.payload) {\r\n          return { ...content, completed: !content.completed };\r\n        } else {\r\n          return content;\r\n        }\r\n      });\r\n    },\r\n  },\r\n});\r\n\r\nexport const { deleteContent, addContent, editContent, checkContent } =\r\n  todoSlice.actions;\r\nexport default todoSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}